# Settings file
{ lib, ... }:

with lib;

{
  options = {
    settings = {
      platform = {
        aws = {
          accessKey = mkOption {
            type = with types; uniq str;
          };
          accessSecret = mkOption {
            type = with types; uniq str;
          };
        };
      };
      usr = {
        name = mkOption {
          default = "simas";
          type = with types; uniq str;
        };
        fullName = mkOption {
          default = "simas";
          type = with types; uniq str;
        };
        pwdHash = mkOption {
          default = "hash it with mkpasswd -m sha-512";
          type = with types; uniq str;
        };
        username = mkOption {
          default = "simisimis";
          type = with types; uniq str;
        };
        email = mkOption {
          default = "simonas@narbuto.lt";
          type = with types; uniq str;
        };
        ssh = {
          gitea.identityFile = mkOption {
            default = "~/.ssh/id_rsa_gitea_src_host";
            type = with types; uniq str;
          };
          backute.identityFile = mkOption {
            default = "~/.ssh/id_rsa_backute_src_host";
            type = with types; uniq str;
          };
          siMONSTER.identityFile = mkOption {
            default = "~/.ssh/id_rsa_src_host";
            type = with types; uniq str;
          };
          hz.identityFile = mkOption {
            default = "~/.ssh/id_ed25519_host";
            type = with types; uniq str;
          };
          github.identityFile = mkOption {
            default = "~/.ssh/id_rsa_github_src_host";
            type = with types; uniq str;
          };
        };
      };
      hw = {
        hostName = mkOption {
          type = with types; uniq str;
          description = "don't be lazy. define it";
        };
        hostId = mkOption {
          type = with types; uniq str;
          description = "don't be lazy. define it";
        };
        videoDrv = mkOption {
          default = "mesa";
          type = with types; uniq str;
          description = "video driver";
        };
        wifi = mkOption {
          default = { };
          description = "set of ssids/pwds";
        };
        wg = {
          addresses = mkOption {
            type = with types; listOf (uniq str);
            default = [ ];
            description = "The IP addresses of the interface";
          };
          dns = mkOption {
            type = with types; listOf (uniq str);
            default = [ ];
            description = "The IP addresses of DNS servers";
          };
          ips = mkOption {
            type = with types; uniq str;
            default = "";
            description = "IPs to access through wg";
          };
          privateKey = mkOption {
            type = with types; uniq str;
            default = "";
            description = "Base64 private key generated by wg genkey";
          };
          peers = {
            client = {
              publicKey = mkOption {
                type = with types; uniq str;
                default = "";
                description = "Client wg public key";
              };
              allowedIPs = mkOption {
                type = with types; listOf (uniq str);
                default = [ "0.0.0.0/0" ];
                description = "The IP addresses of DNS servers";
              };
              endpoint = mkOption {
                type = with types; uniq str;
                default = "";
                description = "Endpoint IP or hostname of the peer";
              };
            };
          };
        };
      };
      services = {
        jira = {
          apiToken = mkOption {
            type = with types; uniq str;
            description = "API token for Jira";
          };
        };
        syncthing = {
          dataDir = mkOption {
            type = with types; uniq str;
            description = "directory to sync";
          };
          configDir = mkOption {
            type = with types; uniq str;
            description = "config dir ";
          };
          ids = mkOption {
            default = { };
            description = "set of ssids/pwds";
          };
        };
        traefik = {
          cloudflareKey = mkOption {
            type = with types; uniq str;
            description = "API token for cloudflare";
          };
        };
        cloudflared = {
          tunnelCredentials = mkOption {
            default = { };
            description = "Cloudflare tunnel credentials";
          };
        };
        authelia = {
          jwtSecret = mkOption {
            type = with types; uniq str;
          };
          storageEncryptionKey = mkOption {
            type = with types; uniq str;
          };
          sessionSecret = mkOption {
            type = with types; uniq str;
          };
          userPassword = mkOption {
            type = with types; uniq str;
          };
        };
        k3s = {
          token = mkOption {
            type = with types; uniq str;
            description = "Randomized common secret";
          };
          nodeIP = mkOption {
            type = with types; uniq str;
            description = "Nodes IP on which to listen";
          };
        };
        vaultwarden = {
          adminToken = mkOption {
            type = with types; uniq str;
          };
          domain = mkOption {
            type = with types; uniq str;
            description = "Vaultwarden url";
          };
          sessionId = mkOption {
            type = with types; uniq str;
            description = "bitwarden cli session ID";
          };
        };
        immich = {
          dbPass = mkOption {
            type = with types; uniq str;
          };
        };
      };

      gitRepos = {
        binfiles = {
          ref = mkOption {
            default = "master";
            type = with types; uniq str;
          };
          rev = mkOption {
            default = "6e65c87f701529a68403647f47db937c7477c9f5";
            type = with types; uniq str;
          };
        };
        awesome = {
          ref = mkOption {
            default = "master";
            type = with types; uniq str;
          };
          rev = mkOption {
            default = "4abfaf5740c5ac8b5664f2d678cacd50957ad49f";
            type = with types; uniq str;
          };
        };
        zshd = {
          ref = mkOption {
            default = "master";
            type = with types; uniq str;
          };
          rev = mkOption {
            default = "3cd0a4e86cc0d4aea9ab13ad5f81ca4bdda90a35";
            type = with types; uniq str;
          };
        };
      };
      profile = mkOption {
        default = "simi";
        type = with types; uniq str;
        description = ''
          Profiles are a higher-level grouping than hosts. They are
          useful to combine multiple related things (e.g. ssh keys)
          that should be available on multiple hosts.
        '';
      };
      hass = {
        latitude = mkOption {
          type = with types; uniq str;
        };
        longitude = mkOption {
          type = with types; uniq str;
        };
        mqttPass = mkOption {
          type = with types; uniq str;
        };
        gcalId = mkOption {
          type = with types; uniq str;
        };
        gcalSecret = mkOption {
          type = with types; uniq str;
        };
        zigbee2mqttPass = mkOption {
          type = with types; uniq str;
        };
        mosquittoUsers = {
          sensor = mkOption {
            type = with types; uniq str;
          };
          hass = mkOption {
            type = with types; uniq str;
          };
        };
      };
    };
  };
}

